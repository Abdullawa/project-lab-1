#include <msp430fr6989.h>

volatile int Control = 0;

int main(void)
{
    /*** Stop watchdog and configure clock ***/
    WDTCTL = WDTPW | WDTHOLD; // Stop watchdog timer

    // Configure DCO for ~5 MHz (you set DCOFSEL_5, actual ≈ 8 MHz)
    CSCTL0_H = CSKEY_H;                   // Unlock CS registers
    CSCTL1 = DCOFSEL_5;                   // DCO = ~8 MHz
    CSCTL2 = SELS__DCOCLK | SELM__DCOCLK; // SMCLK & MCLK from DCO
    CSCTL3 = DIVS__1 | DIVM__1;           // SMCLK = MCLK = DCO / 1
    CSCTL0_H = 0;                         // Lock CS registers

    /*** GPIO Setup ***/
    PM5CTL0 &= ~LOCKLPM5; // Unlock GPIO (FR-series requirement)

    P3DIR |= BIT3;  // P3.3 = output pin for 38 kHz
    P3OUT &= ~BIT3; // Start LOW

   

    /*** Timer0_A Setup ***/
    // Using SMCLK (≈8 MHz) and counting to 104 for ~38 kHz:
    // f = 8e6 / (2 * 104) ≈ 38,462 Hz (toggle each interrupt)
    TA0CCR0 = 92;                   // Period for ~38 kHz toggle rate
    TA0CCTL0 = CCIE;                 // Enable Timer_A CCR0 interrupt
    TA0CTL = TASSEL__SMCLK | MC__UP; // SMCLK source, Up mode

    /*** Enter Low Power Mode with interrupts ***/
    __bis_SR_register(LPM0_bits | GIE);
    __no_operation(); // For debugger
}

/*** Timer0_A0 Interrupt Service Routine ***/
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer0_A0_ISR(void)
{
    // Toggle P3.3 each interrupt -> 38 kHz square wave
    P3OUT ^= BIT3;

    
}
